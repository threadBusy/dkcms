package cc.dkcms.cms.dao;

import cc.dkcms.cms.common.Constant;
import cc.dkcms.cms.common.define.ArticleRankType;
import cc.dkcms.cms.common.define.ContentListQueryParam;
import cc.dkcms.cms.dao.base.BaseDaoArticle;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;

import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")

@Slf4j
public class DaoArticle extends BaseDaoArticle<DaoArticle> {
    public final static DaoArticle dao = new DaoArticle().dao();


    public List<DaoArticle> getRelevantList(Integer articleId, Integer limit) {
        return find("SELECT * FROM " + _getTable().getName() + " WHERE id < ? limit ?",
                articleId, limit);

    }

    public int countByCategoryId(Integer categoryId) {

        return Db.queryInt("SELECT count(id) as sum FROM "
                        + _getTable().getName()
                        + " WHERE is_delete = ? AND category_id=?",
                Constant.FALSE,
                categoryId
        );
    }


    public Page<DaoArticle> getArticleByQueryParam(ContentListQueryParam queryParam) {
        Page<DaoArticle> pageInfo = new Page<>();
        if (queryParam == null) {
            return pageInfo;
        }

        String orderBy   = StringUtils.isEmpty(queryParam.getOrderBy()) ? "sort" : queryParam.getOrderBy();
        String orderSort = queryParam.getOrderSort().toLowerCase().equals("asc") ? "asc" : "desc";


        log.info("ArticleDao.getArticleByQueryParam param:" + queryParam);

        return dao.paginate(
                queryParam.getPage(),
                queryParam.getPageSize(),
                "SELECT * ",
                " FROM  "
                        + _getTable().getName()
                        + " WHERE "
                        + queryParam.getWhere()
                        + " ORDER BY " + orderBy + " " + orderSort);

    }


    public boolean saveOrUpdate() {

        if (getId() == null) {
            return save();
        }
        return update();

    }

    public boolean deleteById(Integer id) {
        DaoArticle daoArticle = new DaoArticle();
        daoArticle.setId(id);
        return daoArticle.delete();
    }


    public int getTotalNum() {
        return Db.queryInt("SELECT COUNT(id) AS cnt FROM " +
                        _getTable().getName() +
                        " WHERE is_delete = ?",
                Constant.FALSE);
    }

    public List<DaoArticle> getRankList(ArticleRankType articleRankType, Integer pageSize, Integer categoryId) {

        if (pageSize == null || pageSize < 0) {
            pageSize = 6;
        }

        String suffix;
        if (ArticleRankType.HOT.equals(articleRankType)) {
            suffix = " ORDER BY click DESC LIMIT " + pageSize;
        } else if (ArticleRankType.LATEST.equals(articleRankType)) {
            suffix = " ORDER BY publish_date DESC LIMIT " + pageSize;
        } else {
            suffix = " AND is_recommend = 1 LIMIT " + pageSize;
        }

        return dao.find("SELECT * FROM "
                + _getTable().getName()
                + " WHERE category_id = ? AND is_delete = " + Constant.FALSE + suffix, categoryId);
    }

    public List<DaoArticle> getListByQueryParam(ContentListQueryParam listQueryParam) {

        return DaoArticle.dao.find(
                "SELECT * FROM "
                        + _getTable().getName()
                        + " WHERE "
                        + listQueryParam.getWhere()
                        + " ORDER BY publish_date DESC");


    }


    public Integer getTotalPage(Integer categoryId, Integer pageSize, boolean includeChildCategory) {

        int totalRecord = 0;
        if (!includeChildCategory) {
            totalRecord = Db.queryInt("SELECT COUNT(id) as cnt FROM "
                    + _getTable().getName()
                    + " WHERE category_id = ?", categoryId);
        } else {

            // 如果没有子栏目，退化成 cid = 0
            String       where = " category_id = " + categoryId;
            Set<Integer> idSet = DaoCategory.dao.getChildIdSet(categoryId, true);
            if (idSet != null && idSet.size() > 0) {
                where = " category_id in(" + StringUtils.join(idSet, ", ") + ") ";
            }
            totalRecord = Db.queryInt("SELECT COUNT(id) as cnt FROM "
                    + _getTable().getName()
                    + " WHERE " + where);
        }
        pageSize = Optional.ofNullable(pageSize).orElse(10);
        return totalRecord / pageSize + 1;
    }

    public DaoArticle getPrevious(Integer id, Integer categoryId) {
        return dao.findFirst("select * from "
                + _getTable().getName() + " where category_id =? and id < ? limit 1", categoryId, id);
    }

    public DaoArticle getNext(Integer id, Integer categoryId) {
        return dao.findFirst("select * from "
                + _getTable().getName() + " where category_id =? and id > ? limit 1", categoryId, id);
    }

    public void click(Integer id) {
        if (id == null) {
            return;
        }
        Db.update("UPDATE " + _getTable().getName() + " SET click = click +1 WHERE id = " + id);
    }
}