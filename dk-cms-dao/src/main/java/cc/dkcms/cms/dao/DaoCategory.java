package cc.dkcms.cms.dao;

import cc.dkcms.cms.common.define.CategoryType;
import cc.dkcms.cms.dao.base.BaseDaoCategory;
import com.jfinal.plugin.activerecord.Db;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import static cc.dkcms.cms.common.Constant.ROOT_CATEGORY_ID;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
@Slf4j
public class DaoCategory extends BaseDaoCategory<DaoCategory> {

    public static final DaoCategory dao = new DaoCategory().dao();

    public static final DaoCategory ROOT_CATEGORY = new DaoCategory();

    static {
        ROOT_CATEGORY.setId(ROOT_CATEGORY_ID);
        ROOT_CATEGORY.setCategoryName("首页栏目");
        ROOT_CATEGORY.setCategoryType(CategoryType.ARTICLE.getType());
        ROOT_CATEGORY.setPermalink("homepage");
    }

    public Set<Integer> getChildIdSet(Integer categoryId, Boolean isRecursion) {
        final Set<Integer> result = new HashSet<>();
        Optional.of(dao.find(
                "SELECT * FROM " + _getTable().getName() + " WHERE parent_id = ?",
                categoryId)
        ).ifPresent((list) -> {
            if (list.size() < 1) {
                return;
            }
            list.forEach(article -> {
                result.add(article.getId());
                if (isRecursion) {
                    result.addAll(getChildIdSet(article.getId(), isRecursion));
                }
            });
        });
        return result;
    }


    public DaoCategory getByName(String categoryName) {

        if (StringUtils.isEmpty(categoryName)) {
            return null;
        }
        return dao.findFirst(
                "SELECT * FROM " + _getTable().getName() + " WHERE category_name = ?",
                categoryName);
    }

    public boolean updateSort(Integer id, Integer sort) {

        DaoCategory entity = new DaoCategory();
        entity.setId(id);
        entity.setSort(sort);
        return entity.update();
    }

    public boolean save(DaoCategory categoryEntity) {

        if (categoryEntity.getId() != null && categoryEntity.getId() > 0) {
            return categoryEntity.save();
        }
        return categoryEntity.update();
    }

    @Deprecated
    public Boolean checkExist(String categoryName) {
        return isCategoryNameExist(categoryName);
    }

    public Boolean isCategoryNameExist(String categoryName) {
        DaoCategory category = getByName(categoryName);
        return category != null;
    }


    public List<DaoCategory> getChildCategory(Integer pid) {

        if (pid == null || pid < 0) {
            pid = 0;
        }
        return dao.find(
                "SELECT * FROM " + _getTable().getName()
                        + " WHERE parent_id = ? ORDER BY sort DESC",
                pid);


    }


    public List<DaoCategory> getCategoryListByTagId(Integer tagId) {
        return dao.find(
                "SELECT * FROM " + _getTable().getName()
                        + " WHERE !ISNULL(tags) "
                        + " AND find_in_set(" + tagId + ",replace(tags,'|',',')) > 0  "
                        + " ORDER BY sort DESC"
        );

    }

    public Integer getChildTotalNum(Integer categoryId) {
        return Db.queryInt("SELECT count(id) as cnt FROM "
                        + _getTable().getName()
                        + " WHERE parent_id= ?",
                categoryId
        );
    }


    public Boolean isPermalinkExists(String permalink, Integer id) {
        if (StringUtils.isEmpty(permalink)) {
            return true;
        }
        if (id == null) {
            return Db.queryInt(
                    "SELECT count(id) as cnt FROM " + _getTable().getName() + " WHERE permalink = ?",
                    permalink) > 0;
        }
        return Db.queryInt(
                "SELECT count(id) as cnt FROM " + _getTable().getName() + " WHERE permalink = ? and id != ?",
                permalink, id) > 0;

    }

    public DaoCategory getById(Integer categoryId) {
        if (categoryId == 0) {
            return ROOT_CATEGORY;
        }
        return dao.findById(categoryId);
    }

    public DaoCategory getRootCategory() {
        return ROOT_CATEGORY;
    }
}
